// Copyright 2023 Peter Hebert. Licensed under the MIT license.

package internal

// This file contains the test 'baby' tokenizer, a truncated version of the
// r50kbase encoding that only contains the first 512 tokens. This is used by
// bpeTokenizer_test.go.
//
// cspell:disable

const (
	babyEndOfTextString = "<|endoftext|>"
	babyEndOfTextToken  = 99999
)

// GetBabyTokenizerParams returns the *BPEParams structure used to create the
// "baby" tokenizer.
func getBabyTokenizerParams() *BPEParams {
	// inflate bytePairLookup into pairsToToken
	pairsToToken := make([]int, 65536)
	for i := 0; i < 65536; i++ {
		pairsToToken[i] = -1
	}
	for _, pair := range bytePairLookup {
		pairsToToken[pair>>20] = int(pair) & 0xfffff
	}

	return &BPEParams{
		Name:           "baby",
		Splitter:       GPT2Splitter,
		ByteEncoder:    byteToToken,
		BytePairLookup: pairsToToken,
		DecoderMap:     tokenList,
		EncoderTrie:    tokenTrie,
		SpecialTokens:  map[string]int{babyEndOfTextString: babyEndOfTextToken},
	}
}

// byteToToken translates raw bytes to their token values
var byteToToken = []byte{
	188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215,
	216, 217, 218, 219, 220, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
	14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
	86, 87, 88, 89, 90, 91, 92, 93, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 255, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152,
	153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 187,
}

// tokenList is the full list of tokens as strings, for decoding
var tokenList = []string{
	"!", "\"", "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".",
	"/", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ":", ";", "<",
	"=", ">", "?", "@", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J",
	"K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X",
	"Y", "Z", "[", "\\", "]", "^", "_", "`", "a", "b", "c", "d", "e", "f",
	"g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t",
	"u", "v", "w", "x", "y", "z", "{", "|", "}", "~", "\xa1", "\xa2", "\xa3",
	"\xa4", "\xa5", "\xa6", "\xa7", "\xa8", "\xa9", "\xaa", "\xab", "\xac",
	"\xae", "\xaf", "\xb0", "\xb1", "\xb2", "\xb3", "\xb4", "\xb5", "\xb6",
	"\xb7", "\xb8", "\xb9", "\xba", "\xbb", "\xbc", "\xbd", "\xbe", "\xbf",
	"\xc0", "\xc1", "\xc2", "\xc3", "\xc4", "\xc5", "\xc6", "\xc7", "\xc8",
	"\xc9", "\xca", "\xcb", "\xcc", "\xcd", "\xce", "\xcf", "\xd0", "\xd1",
	"\xd2", "\xd3", "\xd4", "\xd5", "\xd6", "\xd7", "\xd8", "\xd9", "\xda",
	"\xdb", "\xdc", "\xdd", "\xde", "\xdf", "\xe0", "\xe1", "\xe2", "\xe3",
	"\xe4", "\xe5", "\xe6", "\xe7", "\xe8", "\xe9", "\xea", "\xeb", "\xec",
	"\xed", "\xee", "\xef", "\xf0", "\xf1", "\xf2", "\xf3", "\xf4", "\xf5",
	"\xf6", "\xf7", "\xf8", "\xf9", "\xfa", "\xfb", "\xfc", "\xfd", "\xfe",
	"\xff", "\x00", "\x01", "\x02", "\x03", "\x04", "\x05", "\x06", "\a",
	"\b", "\t", "\n", "\v", "\f", "\r", "\x0e", "\x0f", "\x10", "\x11",
	"\x12", "\x13", "\x14", "\x15", "\x16", "\x17", "\x18", "\x19", "\x1a",
	"\x1b", "\x1c", "\x1d", "\x1e", "\x1f", " ", "\x7f", "\x80", "\x81",
	"\x82", "\x83", "\x84", "\x85", "\x86", "\x87", "\x88", "\x89", "\x8a",
	"\x8b", "\x8c", "\x8d", "\x8e", "\x8f", "\x90", "\x91", "\x92", "\x93",
	"\x94", "\x95", "\x96", "\x97", "\x98", "\x99", "\x9a", "\x9b", "\x9c",
	"\x9d", "\x9e", "\x9f", "\xa0", "\xad", " t", " a", "he", "in", "re",
	"on", " the", "er", " s", "at", " w", " o", "en", " c", "it", "is", "an",
	"or", "es", " b", "ed", " f", "ing", " p", "ou", " an", "al", "ar",
	" to", " m", " of", " in", " d", " h", " and", "ic", "as", "le", " th",
	"ion", "om", "ll", "ent", " n", " l", "st", " re", "ve", " e", "ro",
	"ly", " be", " g", " T", "ct", " S", "id", "ot", " I", "ut", "et", " A",
	" is", " on", "im", "am", "ow", "ay", "ad", "se", " that", " C", "ig",
	" for", "ac", " y", "ver", "ur", " u", "ld", " st", " M", "'s", " he",
	" it", "ation", "ith", "ir", "ce", " you", "il", " B", " wh", "ol", " P",
	" with", " 1", "ter", "ch", " as", " we", " (", "nd", "ill", " D", "if",
	" 2", "ag", "ers", "ke", " \"", " H", "em", " con", " W", " R", "her",
	" was", " r", "od", " F", "ul", "ate", " at", "ri", "pp", "ore", " The",
	" se", "us", " pro", " ha", "um", " are", " de", "ain", "and", " or",
	"igh", "est", "ist", "ab", "rom", " N", "th", " com", " G", "un", "op",
	"00", " L", " not", "ess", " ex", " v", "res", " E", "ew", "ity", "ant",
	" by", "el", "os", "ort", "oc", "qu", " from", " have", " su", "ive",
	"ould", " sh", " this", "nt", "ra", "pe", "ight", "art", "ment", " al",
	"ust", "end", "--", "all", " O", "ack", " ch", " le", "ies", "red",
	"ard", "\xe2\x80", "out", " J", " ab", "ear", "iv", "ally", "our", "ost",
	"gh", "pt", " pl", "ast", " can", "ak", "ome", "ud", "The", " his",
	" do", " go", " has", "ge", "'t", " U", "rou", " sa", " j", " but",
	" wor", " all", "ect", " k", "ame", " will", "ok", " whe", " they",
	"ide", "01", "ff", "ich", "pl", "ther", " tr", "..", " int", "ie", "ure",
	"age", " ne", "ial", "ap", "ine", "ice", " me", " out", "ans", "one",
	"ong", "ions", " who", " K", " up", " their",
}

// tokenTrie is a serialized map[string]int of token string -> rank
var tokenTrie = []uint32{
	0, 0x17900, 0x17b01, 0x17d02, 0x17f03, 0x18104, 0x18305, 0x18506,
	0x18707, 0x18908, 0x18b09, 0x18d0a, 0x18f0b, 0x1910c, 0x1930d, 0x1950e,
	0x1970f, 0x19910, 0x19b11, 0x19d12, 0x19f13, 0x1a114, 0x1a315, 0x1a516,
	0x1a717, 0x1a918, 0x1ab19, 0x1ad1a, 0x1af1b, 0x1b11c, 0x1b31d, 0x1b51e,
	0x1b71f, 0x20220, 0x121, 0x322, 0x523, 0x724, 0x925, 0xb26, 0x26427,
	0xf28, 0x1129, 0x132a, 0x152b, 0x172c, 0x26a2d, 0x26e2e, 0x1d2f, 0x27230,
	0x2131, 0x2332, 0x2533, 0x2734, 0x2935, 0x2b36, 0x2d37, 0x2f38, 0x3139,
	0x333a, 0x353b, 0x373c, 0x393d, 0x3b3e, 0x3d3f, 0x3f40, 0x4141, 0x4342,
	0x4543, 0x4744, 0x4945, 0x4b46, 0x4d47, 0x4f48, 0x5149, 0x534a, 0x554b,
	0x574c, 0x594d, 0x5b4e, 0x5d4f, 0x5f50, 0x6151, 0x6352, 0x6553, 0x27854,
	0x6955, 0x6b56, 0x6d57, 0x6f58, 0x7159, 0x735a, 0x755b, 0x775c, 0x795d,
	0x7b5e, 0x7d5f, 0x7f60, 0x27c61, 0x8362, 0x29a63, 0x8764, 0x2a265,
	0x2b866, 0x2bc67, 0x2c268, 0x2c669, 0x936a, 0x2e46b, 0x2e86c, 0x2f26d,
	0x2f66e, 0x2fc6f, 0x31670, 0x32071, 0x32472, 0x32e73, 0x33474, 0x33a75,
	0x34a76, 0xad77, 0xaf78, 0xb179, 0xb37a, 0xb57b, 0xb77c, 0xb97d, 0xbb7e,
	0x1bb7f, 0x1bd80, 0x1bf81, 0x1c182, 0x1c383, 0x1c584, 0x1c785, 0x1c986,
	0x1cb87, 0x1cd88, 0x1cf89, 0x1d18a, 0x1d38b, 0x1d58c, 0x1d78d, 0x1d98e,
	0x1db8f, 0x1dd90, 0x1df91, 0x1e192, 0x1e393, 0x1e594, 0x1e795, 0x1e996,
	0x1eb97, 0x1ed98, 0x1ef99, 0x1f19a, 0x1f39b, 0x1f59c, 0x1f79d, 0x1f99e,
	0x1fb9f, 0x1fda0, 0xbda1, 0xbfa2, 0xc1a3, 0xc3a4, 0xc5a5, 0xc7a6, 0xc9a7,
	0xcba8, 0xcda9, 0xcfaa, 0xd1ab, 0xd3ac, 0x1ffad, 0xd5ae, 0xd7af, 0xd9b0,
	0xdbb1, 0xddb2, 0xdfb3, 0xe1b4, 0xe3b5, 0xe5b6, 0xe7b7, 0xe9b8, 0xebb9,
	0xedba, 0xefbb, 0xf1bc, 0xf3bd, 0xf5be, 0xf7bf, 0xf9c0, 0xfbc1, 0xfdc2,
	0xffc3, 0x101c4, 0x103c5, 0x105c6, 0x107c7, 0x109c8, 0x10bc9, 0x10dca,
	0x10fcb, 0x111cc, 0x113cd, 0x115ce, 0x117cf, 0x119d0, 0x11bd1, 0x11dd2,
	0x11fd3, 0x121d4, 0x123d5, 0x125d6, 0x127d7, 0x129d8, 0x12bd9, 0x12dda,
	0x12fdb, 0x131dc, 0x133dd, 0x135de, 0x137df, 0x139e0, 0x13be1, 0x34ee2,
	0x13fe3, 0x141e4, 0x143e5, 0x145e6, 0x147e7, 0x149e8, 0x14be9, 0x14dea,
	0x14feb, 0x151ec, 0x153ed, 0x155ee, 0x157ef, 0x159f0, 0x15bf1, 0x15df2,
	0x15ff3, 0x161f4, 0x163f5, 0x165f6, 0x167f7, 0x169f8, 0x16bf9, 0x16dfa,
	0x16ffb, 0x171fc, 0x173fd, 0x175fe, 0x177ff, 0xdd30, 0x2dd22, 0x2cb28,
	0x2c131, 0x2d532, 0x27b41, 0x2b742, 0x28f43, 0x2d144, 0x33945, 0x2f146,
	0x32547, 0x2df48, 0x27549, 0x3834a, 0x3fb4b, 0x32d4c, 0x2a34d, 0x31f4e,
	0x3714f, 0x2bd50, 0x2e752, 0x26f53, 0x35254, 0x3af55, 0x2e557, 0x35661,
	0x36462, 0x36c63, 0x37464, 0x37a65, 0x37e66, 0x38467, 0x38868, 0x39069,
	0x3b56a, 0x3bf6b, 0x3986c, 0x39c6d, 0x3a06e, 0x3a66f, 0x3b070, 0x3b672,
	0x3ba73, 0x3c674, 0x3ce75, 0x33576, 0x3d277, 0x3de79, 0x702, 0x2a573,
	0x3ad74, 0xd01, 0x36d2d, 0xe01, 0x3d92e, 0x1002, 0x32b30, 0x3cd31,
	0x3401, 0x3e268, 0x410e, 0x31b62, 0x3e663, 0x28964, 0x3ea67, 0x3ee69,
	0x39b6b, 0x3f26c, 0x3f66d, 0x3fa6e, 0x3e770, 0x40272, 0x40873, 0x40c74,
	0x28779, 0x4303, 0x2b165, 0x2c568, 0x26d74, 0x450a, 0x41261, 0x41663,
	0x22964, 0x3436c, 0x2e16d, 0x41a6e, 0x42072, 0x42473, 0x27974, 0x33b77,
	0x4601, 0x3cf66, 0x4702, 0x3ab65, 0x39168, 0x4801, 0x42a65, 0x490e,
	0x42e61, 0x43263, 0x43864, 0x43c65, 0x2d366, 0x44067, 0x4446c, 0x2816d,
	0x4486e, 0x44e6f, 0x2af72, 0x45273, 0x45674, 0x45c76, 0x4b01, 0x2db65,
	0x4c04, 0x29f64, 0x24b65, 0x2536c, 0x26579, 0x4d01, 0x46065, 0x4e02,
	0x2cd64, 0x35b74, 0x4f0c, 0x34963, 0x2ef64, 0x3c56b, 0x2bb6c, 0x4646d,
	0x4686e, 0x32970, 0x46e72, 0x47473, 0x27374, 0x47875, 0x28577, 0x5004,
	0x35f65, 0x3d36c, 0x2fb70, 0x39374, 0x5101, 0x34b75, 0x5204, 0x35d61,
	0x48065, 0x2f969, 0x4866f, 0x5302, 0x28b65, 0x25b74, 0x5402, 0x48c65,
	0x49068, 0x5507, 0x39f64, 0x2f36c, 0x3096d, 0x3276e, 0x49472, 0x49873,
	0x27774, 0x5601, 0x49c65, 0x9f01, 0x37f80, 0x13601, 0x4a068, 0x10206,
	0x38562, 0x4a46c, 0x4a86e, 0x4ac72, 0x2c773, 0x2f774, 0x11403, 0x26765,
	0x4b075, 0x34179, 0x10e03, 0x4b461, 0x37568, 0x4b86f, 0x12102, 0x30d65,
	0x3a56f, 0x13101, 0x33378, 0x11602, 0x4be6f, 0x4c272, 0x13501, 0x3a76f,
	0x12203, 0x4c661, 0x2a765, 0x4cc69, 3, 0x4d06e, 0x27d73, 0x2a974,
	0x12d01, 0x37765, 0x11e01, 0x3ed65, 0x12c02, 0x3e365, 0x4d46f, 0x10c04,
	0x23d66, 0x27f6e, 0x31372, 0x4d875, 0x11802, 0x3956c, 0x4dc72, 0x17701,
	0x25d65, 0x10905, 0x3b361, 0x30165, 0x35768, 0x2a174, 0x35175, 0x10103,
	0x4e068, 0x2396f, 0x3d772, 0x14f01, 0x3fd70, 0x10b05, 0x4e861, 0x2c965,
	0x4ec68, 0x4f269, 0x4f86f, 0x14c01, 0x4fc6f, 1, 0x3a165, 0x14b01,
	0x3736b, 0x16c01, 0x3e165, 1, 0x30f6e, 0x11b01, 0x5006c, 0x14201,
	0x3c165, 0x11103, 0x31164, 0x3f173, 0x33f74, 0x11c02, 0x37d64, 0x36374,
	0x12501, 0x39774, 0x10a02, 0x2f565, 0x50469, 1, 0x38772, 1, 0x3bd74,
	0x10d02, 0x36b64, 0x25574, 0x10801, 0x2d973, 0x11302, 0x33173, 0x31774,
	0x10301, 0x2e972, 1, 0x3e56c, 0x12402, 0x3eb65, 0x3d168, 0x13901,
	0x3cb65, 0x1ef01, 0x37973, 0x14901, 0x50868, 0x15b01, 0x2cf6c, 0x10402,
	0x3e965, 0x22d67, 1, 0x50c6e, 0x11001, 0x31974, 0x10f02, 0x2ad68,
	0x33d79, 0x1c501, 0x35365, 1, 0x5106e, 0x12901, 0x39d65, 0x10602,
	0x3f365, 0x3f567, 0x11202, 0x2fd65, 0x34774, 0x1a301, 0x38f74, 0x11903,
	0x5146c, 0x38d72, 0x38174, 0x10502, 0x37b64, 0x33773, 0x13202, 0x31d6d,
	0x3b175, 1, 0x2c372, 0x19101, 0x51865, 0x14e01, 0x3df65, 0x18201,
	0x36974, 0x13001, 0x29972, 1, 0x2ff65, 0x1b401, 0x3bb6c, 0x11a01,
	0x24564, 1, 0x30b65, 1, 0x3b774, 1, 0x3996e, 2, 0x3236d, 0x2e36e, 1,
	0x29372, 1, 0x51c6f, 0x18402, 0x3a973, 0x52076, 1, 0x3a373, 0x12001,
	0x3db74, 1, 0x32f74, 1, 0x3ef74, 1, 0x3056f, 0x12703, 0x52461, 0x52865,
	0x52e69, 1, 0x2eb73, 0x15d02, 0x3c765, 0x3f96f, 2, 0x5326c, 0x53674, 1,
	0x3b972, 1, 0x2b375, 0x1b801, 0x38b79, 1, 0x53a6f, 0x18b01, 0x36174,
	0x12801, 0x3f773, 1, 0x36574, 1, 0x35564, 1, 0x3d572, 1, 0x34d6d, 1,
	0x34f65, 1, 0x28d74, 0x10702, 0x53e69, 0x3c979, 1, 0x35973, 1, 0x3c36c,
	1, 0x2bf68, 1, 0x2ab6e, 1, 0x3ff72,
}

// bytePairLookup maps pairs of bytes to tokens, for kicking off BPE
var bytePairLookup = []int64{
	0x20220016e, 0x202800165, 0x203100160, 0x20320016a, 0x20410013d,
	0x20420015b, 0x204300147, 0x204400168, 0x20450019c, 0x204600178,
	0x204700192, 0x20480016f, 0x20490013a, 0x204a001c1, 0x204b001fd,
	0x204c00196, 0x204d00151, 0x204e0018f, 0x204f001b8, 0x20500015e,
	0x205200173, 0x205300137, 0x205400135, 0x2055001d7, 0x205700172,
	0x206100101, 0x206200113, 0x20630010d, 0x206400120, 0x206500130,
	0x206600115, 0x206700134, 0x206800121, 0x206a001da, 0x206b001df,
	0x206c0012c, 0x206d0011d, 0x206e0012b, 0x206f0010b, 0x207000117,
	0x207200176, 0x207300108, 0x207400100, 0x20750014e, 0x20760019a,
	0x20770010a, 0x20790014b, 0x277300152, 0x2774001d6, 0x2d2d001b6,
	0x2e2e001ec, 0x303000195, 0x3031001e6, 0x61620018d, 0x61630014a,
	0x616400144, 0x61670016b, 0x616b001cd, 0x616c0011a, 0x616d00141,
	0x616e00110, 0x6170001f3, 0x61720011b, 0x617300124, 0x617400109,
	0x617900143, 0x636500158, 0x636800162, 0x637400136, 0x656400114,
	0x656c001a1, 0x656d00170, 0x656e0010c, 0x657200107, 0x657300112,
	0x65740013c, 0x65770019d, 0x6666001e7, 0x6765001d5, 0x6768001c8,
	0x686500102, 0x696300123, 0x696400138, 0x6965001ee, 0x696600169,
	0x696700148, 0x696c0015a, 0x696d00140, 0x696e00103, 0x697200157,
	0x69730010f, 0x69740010e, 0x6976001c4, 0x6b650016d, 0x6c640014f,
	0x6c6500125, 0x6c6c00129, 0x6c7900132, 0x6e6400166, 0x6e74001ad,
	0x6f63001a4, 0x6f6400177, 0x6f6b001e2, 0x6f6c0015d, 0x6f6d00128,
	0x6f6e00105, 0x6f7000194, 0x6f7200111, 0x6f73001a2, 0x6f7400139,
	0x6f7500118, 0x6f7700142, 0x7065001af, 0x706c001e9, 0x70700017d,
	0x7074001c9, 0x7175001a5, 0x7261001ae, 0x726500104, 0x72690017c,
	0x726f00131, 0x736500145, 0x73740012d, 0x746800190, 0x7564001cf,
	0x756c00179, 0x756d00184, 0x756e00193, 0x75720014d, 0x757300181,
	0x75740013b, 0x76650012f, 0xe280001bf,
}
